#!/usr/bin/env bun
// @bun
import{join as w}from"path";var O=/^(['"])(.*)\1$/,T=/^(?:true|false)$/,z=/^[+-]?\d+$/,d=/^[+-]?\d+\.\d+$/;function p(o){return o.trim()}function b(o){return o.length>0}function F(o){return O.test(o)}function s(o){return z.test(o)?Number.parseInt(o,10):Number.parseFloat(o)}function y(o){let c={},g=c,M=o.split(/\r?\n/),$=0;for(let n of M){let B=n.trim();if(!B||B.startsWith("#")){$+=1;continue}if(B.startsWith("[")&&B.endsWith("]")){let A=B.slice(1,-1).trim();if(!A)throw new Error(`Invalid table header at line ${$+1}`);let C=A.split(".").map(p);g=c;for(let S of C){if(!g[S]||typeof g[S]!=="object")g[S]={};g=g[S]}$+=1;continue}let U=B.indexOf("=");if(U===-1)throw new Error(`Invalid line (no '=') at line ${$+1}`);let Z=B.slice(0,U).trim().split(".").map(p),f=B.slice(U+1).trim();if(!f.startsWith('"')&&!f.startsWith("'")){let A=f.indexOf("#");if(A!==-1)f=f.slice(0,A).trim()}let J;if(F(f))J=f.slice(1,-1);else if(T.test(f))J=f==="true";else if(z.test(f)||d.test(f))J=s(f);else if(f.startsWith("{")&&f.endsWith("}")){let A=f.slice(1,-1).trim(),C={};if(A){let S=A.split(",").map(p).filter(b);for(let Q of S){let L=Q.indexOf("=");if(L===-1)throw new Error(`Invalid inline table entry '${Q}' at line ${$+1}`);let Y=Q.slice(0,L).trim();if(F(Y))Y=Y.slice(1,-1);let D=Q.slice(L+1).trim();if(F(D))C[Y]=D.slice(1,-1);else if(T.test(D))C[Y]=D==="true";else if(z.test(D)||d.test(D))C[Y]=s(D);else if(D.startsWith("[")&&D.endsWith("]")){let x=D.slice(1,-1).split(",").map(p).filter(b);C[Y]=x.map((W)=>{if(F(W))return W.slice(1,-1);if(T.test(W))return W==="true";if(z.test(W)||d.test(W))return s(W);throw new Error(`Invalid array item '${W}' in inline table at line ${$+1}`)})}else throw new Error(`Unsupported inline table value '${D}' at line ${$+1}`)}}J=C}else if(f.startsWith("[")&&f.endsWith("]"))J=f.slice(1,-1).split(",").map(p).filter(b).map((C)=>{if(F(C))return C.slice(1,-1);if(T.test(C))return C==="true";if(z.test(C)||d.test(C))return s(C);throw new Error(`Invalid array item '${C}' at line ${$+1}`)});else throw new Error(`Unsupported value '${f}' at line ${$+1}`);let P=g;for(let A=0;A<Z.length-1;A+=1){let C=Z[A];if(!C)continue;if(!P[C]||typeof P[C]!=="object")P[C]={};P=P[C]}let q=Z[Z.length-1];if(q)P[q]=J;$+=1}return c}function V(o){return o instanceof Error?o.message:String(o)}async function G(o){let c=Bun.file(o);if(!await c.exists())throw new Error(`File not found: ${o}`);let M;try{M=await c.text()}catch($){if($ instanceof Error&&"code"in $&&$.code==="ENOENT")throw new Error(`File not found: ${o}`);throw $}try{return y(M)}catch($){throw new Error(`Failed to parse bunfig file: ${V($)}`)}}function K(o){if(typeof o==="string")return`"${o.replace(/"/g,"\\\"")}"`;if(typeof o==="boolean"||typeof o==="number")return String(o);if(Array.isArray(o))return`[${o.map(K).join(", ")}]`;throw new Error(`Cannot serialize value: ${o}`)}function R([,o]){return o!==null&&typeof o==="object"&&!Array.isArray(o)}function h(o,c=""){let g=new Array,M=0,$=new Array,n=0;for(let[U,H]of Object.entries(o)){let Z=c?`${c}.${U}`:U;if(H!==null&&typeof H==="object"&&!Array.isArray(H)){let f=Object.entries(H);if(!f.some(R)){let P=f.map(([q,A])=>`${K(q)} = ${K(A)}`).join(", ");g[M++]=`${U} = { ${P} }`}else $[n++]={key:Z,value:H}}else g[M++]=`${U} = ${K(H)}`}let B=g.join(`
`);for(let{key:U,value:H}of $)B+=`

[${U}]
${h(H,U)}`;return B}var I=process.cwd(),m=new RegExp(`^${I.replace(/[/\\^$*+?.()|[\]{}]/g,"\\$&")}/`),N=w(I,"plugins","bun","range-plugin.ts"),j=w(I,"bunfig.toml"),E=`import rangeMacroPlugin from "bun-range-macro";

await Bun.plugin(rangeMacroPlugin);
`;function X(o){return o.replace(m,"")}function k(o){return[...new Set(o)]}function _(o){let c=X(N);if(typeof o==="string")return k([o,c]);if(Array.isArray(o))return k([...o,c]);return[c]}async function i(){await Bun.file(N).write(E),console.log(`Created plugin at ${X(N)}`)}async function r(){let o=Bun.file(j),c=await o.exists(),g;if(c)g=await G(j),g.define={...g.define,$range:"$range"},g.preload=_(g.preload),g.test={...g.test,preload:_(g.test?.preload)};else g={define:{$range:"$range"},preload:_(void 0),test:{preload:_(void 0)}};await o.write(h(g)),console.log(`Updated bunfig.toml at ${X(j)}`)}await i();await r();
