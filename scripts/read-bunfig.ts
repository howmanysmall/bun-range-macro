/* eslint-disable max-depth -- annoying */
/* eslint-disable max-lines-per-function -- worthless in this context */

function trim(value: string): string {
	return value.trim();
}
function filterEmpty(value: string): boolean {
	return value.length > 0;
}

function isQuoted(value: string): boolean {
	return (value.startsWith('"') && value.endsWith('"')) || (value.startsWith("'") && value.endsWith("'"));
}

/**
 * Bun configuration schema for `bunfig.toml`. See
 * https://bun.sh/docs/runtime/bunfig.
 */
export interface BunConfiguration {
	/** Any other custom fields are permitted. */
	[key: string]: unknown;

	/**
	 * Replace global identifiers with constant expressions. Bun will inline
	 * these everywhere.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#define
	 */
	define?: Record<string, string>;

	/**
	 * Package‐manager (“bun install”) options.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#package-manager
	 */
	install?: InstallConfiguration;

	/**
	 * Configure how Bun handles JSX.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#jsx
	 * @see https://www.typescriptlang.org/tsconfig/#jsx
	 */
	jsx?: string;

	/**
	 * Specify the function that is used to create JSX elements.
	 *
	 * @see https://www.typescriptlang.org/tsconfig#jsxFactory
	 */
	jsxFactory?: string;

	/**
	 * Specify the function that is used for JSX fragments.
	 *
	 * @see https://www.typescriptlang.org/tsconfig#jsxFragment
	 */
	jsxFragment?: string;

	/**
	 * Specify the module specifier to be used for importing the JSX factory
	 * functions.
	 *
	 * @see https://www.typescriptlang.org/tsconfig#jsxImportSource
	 */
	jsxImportSource?: string;

	/**
	 * Configure how Bun maps file extensions to loaders.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#loader
	 */
	loader?: Record<string, Loader>;

	/**
	 * Set the log level. Can be one of `"debug"`, `"warn"`, or `"error"`.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#loglevel
	 */
	logLevel?: LogLevel;

	/**
	 * An array or string of scripts/plugins to run before running the file or
	 * script.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#preload
	 */
	preload?: Array<string> | string;

	/**
	 * `bun run` options.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#bun-run
	 */
	run?: RunConfiguration;

	/**
	 * Enable `smol` mode. This reduces memory usage at the cost of performance.
	 *
	 * @default false
	 * @see https://bun.sh/docs/runtime/bunfig#smol
	 */
	smol?: boolean;

	/**
	 * Enable or disable Bun’s telemetry.
	 *
	 * @default true
	 * @see https://bun.sh/docs/runtime/bunfig#telemetry
	 */
	telemetry?: boolean;

	/**
	 * Test runner options.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#test-runner
	 */
	test?: TestConfiguration;
}

/**
 * Log level for Bun output. Determines the verbosity of logs.
 *
 * - "debug": Detailed debug information.
 * - "error": Only error messages.
 * - "warn": Warnings and errors.
 */
export type LogLevel = "debug" | "error" | "warn";

/** Valid values for `loader[...]`. */
export type Loader =
	| "base64"
	| "css"
	| "dataurl"
	| "file"
	| "js"
	| "json"
	| "jsx"
	| "napi"
	| "text"
	| "toml"
	| "ts"
	| "tsx"
	| "wasm";

/**
 * Options under the `[test]` section.
 *
 * @see https://bun.sh/docs/runtime/bunfig#test-runner
 */
export interface TestConfiguration {
	/**
	 * Enable coverage reporting.
	 *
	 * @default false
	 * @see https://bun.sh/docs/runtime/bunfig#test-coverage
	 */
	coverage?: boolean;

	/**
	 * Directory in which to write persistent coverage reports. Default:
	 * `"coverage"`.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#test-coveragedir
	 */
	coverageDir?: string;

	/**
	 * Coverage reporters to run. Default: `["text"]`.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#test-coveragereporter
	 */
	coverageReporter?: Array<CoverageReporter>;

	/**
	 * Skip test files when computing coverage. Default: `false`.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#test-coverageskiptestfiles
	 */
	coverageSkipTestFiles?: boolean;

	/**
	 * Coverage threshold: a single number or per‐metric map.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#test-coveragethreshold
	 */
	coverageThreshold?: number | Record<string, number>;

	/**
	 * Same as top‐level `preload`, but only for `bun test`.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#test-preload
	 */
	preload?: Array<string> | string;

	/**
	 * The root directory to run tests from. Default: `"."`.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#test-root
	 */
	root?: string;

	/**
	 * Same as top‐level `smol`, but only for `bun test`.
	 *
	 * @default false
	 * @see https://bun.sh/docs/runtime/bunfig#test-smol
	 */
	smol?: boolean;
}

/**
 * Specifies the format of coverage reports generated by the test runner.
 *
 * - "lcov": Generates an LCOV coverage report.
 * - "text": Generates a plain text coverage report.
 */
export type CoverageReporter = "lcov" | "text";

/**
 * Options under the `[install]` section.
 *
 * @see https://bun.sh/docs/runtime/bunfig#package-manager
 */
export interface InstallConfiguration {
	/**
	 * @default "auto"
	 * @see https://bun.sh/docs/runtime/bunfig#install-auto
	 */
	auto?: AutoInstall;

	/** CA certificate as a string. */
	ca?: string;

	/**
	 * Cache settings.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#install-cache
	 */
	cache?: {
		/**
		 * Directory to use for cache.
		 *
		 * @default "~/.bun/install/cache"
		 */
		dir?: string;

		/**
		 * Skip loading from global cache.
		 *
		 * @default false
		 */
		disable?: boolean;

		/**
		 * Always resolve latest from registry.
		 *
		 * @default false
		 */
		disableManifest?: boolean;
	};

	/** Path to a CA file containing one or more certs. */
	cafile?: string;

	/** @default true */
	dev?: boolean;

	/** @default false */
	dryRun?: boolean;

	/** @default false */
	exact?: boolean;

	/** @default false */
	frozenLockfile?: boolean;

	/**
	 * Directory for globally‐installed binaries.
	 *
	 * @default "~/.bun/bin"
	 */
	globalBinDir?: string;

	/**
	 * Directory for globally‐installed packages.
	 *
	 * @default "~/.bun/install/global"
	 */
	globalDir?: string;

	/**
	 * Lockfile behavior.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#install-lockfile
	 */
	lockfile?: {
		/** Generate alongside `bun.lock`. Currently only `"yarn"`. */
		print?: "yarn";
		/**
		 * Generate a lockfile on install.
		 *
		 * @default true
		 */
		save?: boolean;
	};

	/** @default true */
	optional?: boolean;

	/** @default true */
	peer?: boolean;

	/** @default false */
	production?: boolean;

	/**
	 * Registry URL or detailed config.
	 *
	 * @default "https://registry.npmjs.org/"
	 * @see https://bun.sh/docs/runtime/bunfig#install-registry
	 */
	registry?: string | { token?: string; url: string };

	/** @default true */
	saveTextLockfile?: boolean;

	/**
	 * Per-scope registry overrides.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#install-scopes
	 */
	scopes?: Record<string, string | { password?: string; token?: string; url: string; username?: string }>;
}

/** The automatic installation configuration. */
export type AutoInstall = "auto" | "disable" | "fallback" | "force";

/**
 * Options under the `[run]` section.
 *
 * @see https://bun.sh/docs/runtime/bunfig#bun-run
 */
export interface RunConfiguration {
	/**
	 * When true, auto-alias `node` → `bun` in `bun run`.
	 *
	 * @default false
	 * @see https://bun.sh/docs/runtime/bunfig#run-bun-auto-alias-node-to-bun
	 */
	bun?: boolean;

	/**
	 * Which shell to use for scripts.
	 *
	 * @see https://bun.sh/docs/runtime/bunfig#run-shell-use-the-system-shell-or-bun-s-shell
	 */
	shell?: "bun" | "system";

	/**
	 * Suppress the command output itself.
	 *
	 * @default false
	 * @see https://bun.sh/docs/runtime/bunfig#run-silent-suppress-reporting-the-command-being-run
	 */
	silent?: boolean;
}

function parseToml(content: string): Record<string, any> {
	const result: Record<string, any> = {};
	let current: Record<string, any> = result;
	const lines = content.split(/\r?\n/);

	for (const [index, raw] of lines.entries()) {
		const line = raw.trim();
		if (!line || line.startsWith("#")) continue;

		if (line.startsWith("[") && line.endsWith("]")) {
			const headerName = line.slice(1, -1).trim();
			if (!headerName) throw new Error(`Invalid table header at line ${index + 1}`);

			const parts = headerName.split(".").map(trim);
			current = result;
			for (const part of parts) {
				if (!current[part] || typeof current[part] !== "object") current[part] = {};
				current = current[part];
			}
			continue;
		}

		const equalsIndex = line.indexOf("=");
		if (equalsIndex === -1) throw new Error(`Invalid line (no '=') at line ${index + 1}`);

		const rawKey = line.slice(0, equalsIndex).trim();
		const keyParts = rawKey.split(".").map(trim);
		let rawValue = line.slice(equalsIndex + 1).trim();

		if (!rawValue.startsWith('"') && !rawValue.startsWith("'")) {
			const commentIndex = rawValue.indexOf("#");
			if (commentIndex !== -1) rawValue = rawValue.slice(0, commentIndex).trim();
		}

		let value: unknown;
		if (isQuoted(rawValue)) value = rawValue.slice(1, -1);
		else if (/^(true|false)$/.test(rawValue)) value = rawValue === "true";
		else if (/^[+-]?\d+$/.test(rawValue)) value = Number.parseInt(rawValue, 10);
		else if (/^[+-]?\d+\.\d+$/.test(rawValue)) value = Number.parseFloat(rawValue);
		else if (rawValue.startsWith("{") && rawValue.endsWith("}")) {
			const inner = rawValue.slice(1, -1).trim();
			const internalObject: Record<string, any> = {};
			if (inner) {
				const entries = inner.split(",").map(trim).filter(filterEmpty);
				for (const entry of entries) {
					const equalIndex = entry.indexOf("=");
					if (equalIndex === -1)
						throw new Error(`Invalid inline table entry '${entry}' at line ${index + 1}`);

					let key = entry.slice(0, equalIndex).trim();
					if (isQuoted(key)) key = key.slice(1, -1);

					const valueRaw = entry.slice(equalIndex + 1).trim();
					if (isQuoted(valueRaw)) internalObject[key] = valueRaw.slice(1, -1);
					else if (/^(true|false)$/.test(valueRaw)) internalObject[key] = valueRaw === "true";
					else if (/^[+-]?\d+$/.test(valueRaw)) internalObject[key] = Number.parseInt(valueRaw, 10);
					else if (/^[+-]?\d+\.\d+$/.test(valueRaw)) internalObject[key] = Number.parseFloat(valueRaw);
					else if (valueRaw.startsWith("[") && valueRaw.endsWith("]")) {
						const arrayItems = valueRaw.slice(1, -1).split(",").map(trim).filter(filterEmpty);
						internalObject[key] = arrayItems.map((item) => {
							if (isQuoted(item)) return item.slice(1, -1);
							if (/^(true|false)$/.test(item)) return item === "true";
							if (/^[+-]?\d+$/.test(item)) return Number.parseInt(item, 10);
							if (/^[+-]?\d+\.\d+$/.test(item)) return Number.parseFloat(item);
							throw new Error(`Invalid array item '${item}' in inline table at line ${index + 1}`);
						});
					} else throw new Error(`Unsupported inline table value '${valueRaw}' at line ${index + 1}`);
				}
			}
			value = internalObject;
		} else if (rawValue.startsWith("[") && rawValue.endsWith("]")) {
			const items = rawValue.slice(1, -1).split(",").map(trim).filter(filterEmpty);
			value = items.map((item) => {
				if (isQuoted(item)) return item.slice(1, -1);
				if (/^(true|false)$/.test(item)) return item === "true";
				if (/^[+-]?\d+$/.test(item)) return Number.parseInt(item, 10);
				if (/^[+-]?\d+\.\d+$/.test(item)) return Number.parseFloat(item);
				throw new Error(`Invalid array item '${item}' at line ${index + 1}`);
			});
		} else throw new Error(`Unsupported value '${rawValue}' at line ${index + 1}`);

		let target = current;
		for (let jndex = 0; jndex < keyParts.length - 1; jndex += 1) {
			const part = keyParts[jndex];
			if (!part) continue;
			if (!target[part] || typeof target[part] !== "object") target[part] = {};
			target = target[part];
		}

		target[keyParts[keyParts.length - 1]!] = value;
	}

	return result;
}

function errorToString(value: unknown): string {
	return value instanceof Error ? value.message : String(value);
}

/**
 * Reads and parses a bunfig TOML file.
 *
 * @param filePath - Path to the bunfig.toml file.
 * @returns Parsed configuration object.
 * @throws Error if the file is missing or invalid.
 */
export async function readBunConfigurationAsync(filePath: string): Promise<BunConfiguration> {
	const file = Bun.file(filePath);
	const exists = await file.exists();
	if (!exists) throw new Error(`File not found: ${filePath}`);

	let content: string;
	try {
		content = await file.text();
	} catch (error: unknown) {
		if (error instanceof Error && "code" in error && error.code === "ENOENT")
			throw new Error(`File not found: ${filePath}`);
		throw error;
	}

	try {
		return parseToml(content);
	} catch (error: unknown) {
		throw new Error(`Failed to parse bunfig file: ${errorToString(error)}`);
	}
}

function serializeValue(value: unknown): string {
	if (typeof value === "string") return `"${value.replace(/"/g, '\\"')}"`;
	if (typeof value === "boolean" || typeof value === "number") return String(value);
	if (Array.isArray(value)) {
		const items = value.map(serializeValue).join(", ");
		return `[${items}]`;
	}
	throw new Error(`Cannot serialize value: ${value}`);
}

interface TableEntry {
	readonly key: string;
	readonly value: object;
}

function isNested([, value]: [string, unknown]): boolean {
	return value !== null && typeof value === "object" && !Array.isArray(value);
}

/**
 * Recursively serialize a JS object into a TOML string.
 *
 * @param object - The object to serialize.
 * @param parentKey - Parent key path used for nested tables.
 * @returns The serialized TOML string.
 */
export function serializeToml(object: object, parentKey = ""): string {
	const lines = new Array<string>();
	let linesLength = 0;

	const tables = new Array<TableEntry>();
	let tablesLength = 0;

	for (const [key, value] of Object.entries(object)) {
		const fullKey = parentKey ? `${parentKey}.${key}` : key;
		if (value !== null && typeof value === "object" && !Array.isArray(value)) {
			// Inline simple objects as TOML inline tables if they contain no nested objects
			const entries = Object.entries(value);
			const hasNested = entries.some(isNested);
			if (!hasNested) {
				const inner = entries
					.map(
						([internalKey, internalValue]) =>
							`${serializeValue(internalKey)} = ${serializeValue(internalValue)}`,
					)
					.join(", ");
				lines[linesLength++] = `${key} = { ${inner} }`;
			} else tables[tablesLength++] = { key: fullKey, value };
		} else lines[linesLength++] = `${key} = ${serializeValue(value)}`;
	}

	let result = lines.join("\n");
	for (const { key, value } of tables) result += `\n\n[${key}]\n${serializeToml(value, key)}`;
	return result;
}
